// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  phone String
  email String
  address String?
  data DateTime? @default(now())
  upDate DateTime? @default(now())

  // relacionamento com tabela User
  userId String? @db.ObjectId
  user User? @relation(fields: [userId], references: [id])

  // relacionamento com tabela tickets
  tickets Ticket[]
}

model Ticket{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  nome String
  descricao String
  status String
  data DateTime? @default(now())
  upDate DateTime? @default(now())

  // relacionamento com tabela Customers
  customerId String? @db.ObjectId
  customer Customer? @relation(fields: [customerId], references: [id])
  
  // relacionamento com tabela User
  userId String? @db.ObjectId
  user User? @relation(fields: [userId], references: [id])
}


model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  tickets Ticket[]
  customers Customer[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String @id @default(auto()) @map("_id") @db.ObjectId
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}